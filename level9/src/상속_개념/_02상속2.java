package 상속_개념;
// 객체지향 : OOP : object oriented programming
//여러 객체들이 상호 협력해서 task를 수행완료 시키는 것.
// 영화를 예매한다 ! (task) (스크린 : 영화의 상영정보, -> 영화관(영화 가격(할인)등) 객체 , 고객, 좌석

// 객체들이 유기적으로 존재해서 상호작용(메서드를 호출, 리턴값을 받아오기) -> 시스템을 구성하는 프로그램 방식

//1. 캡슐화 : 객체를 독립적으로 만들어준다. private필드, getter setter 통해서
// 메서드는 보여주고 내부 기능은 숨긴다. : 외부클래스는 해당 클래스가 어떤 기능을 하는지만 안다.

//2. 상속
//3. 추상화
//4. 다형성

class A1{
	int a;
	int b;
	
}
class B1{
	A1 a = new A1();
	int c;
	int d;
	
}

//상속은 자식클래스가 extends 부모클래스 이름
class C1 extends A1{
	int e;
	int f;
	
}
// 상속받은 자식 클래스
// 1. 부모 클래스의 필드, 메서드를 사용할 수 있다.
// 2. 상속은 단 한번만 허용한다. (다중상속 불가능)
// 3. 부모클래스의 생성자는 상속되지 않는다. (부모클래스의 생성자를 호출해야한다.)
// 4. 부모클래스의 private 필드는 상속은 되지만 직접 접근은 불가능하다.
// 5. 부모클래스의 메서드를 자식클래스에서 재정의 할 수 있다. (오버라이딩)
// 6. 부모클래스의 메서드를 자식클래스에서 재정의 할 수 없다. (오버로딩)

public class _02상속2 {
	public static void main(String[] args) {
		A1 a = new A1();
		B1 b = new B1();
		C1 c = new C1();

		
	}
}
